<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnjiasuqi.github.io/news/article-70533.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>SpringCloud之Feign使用和拓展</title>
        <meta name="description" content="SpringCloud之Feign使用和拓展 在使用Spring Cloud开发微服务应用时，各个服务提供者都是以HTTP接口的形式对外提供服务，因此在服务消费者调用服务提供者时，底层通过HTTP C" />
        <link rel="icon" href="/assets/website/img/v2ray_clash/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN加速器 机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnjiasuqi.github.io/news/article-70533.htm" />
    <meta property="og:site_name" content="VPN加速器 机场订阅节点官网" />
    <meta property="og:title" content="SpringCloud之Feign使用和拓展" />
    <meta property="og:image" content="https://vpnjiasuqi.github.io/uploads/20250105/1e93b638242395de7a2a00f5da271e3d.webp" />
        <meta property="og:release_date" content="2025-03-09T09:47:08" />
    <meta property="og:updated_time" content="2025-03-09T09:47:08" />
        <meta property="og:description" content="SpringCloud之Feign使用和拓展 在使用Spring Cloud开发微服务应用时，各个服务提供者都是以HTTP接口的形式对外提供服务，因此在服务消费者调用服务提供者时，底层通过HTTP C" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringCloud之Feign使用和拓展">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- bootstrap 4.0 css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/bootstrap.min.css">
    <!-- owl.carousel css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/owl.carousel.min.css">
    <!-- Animate css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/animate.min.css">
    <!-- magnific css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/magnific-popup.css">
    <!-- meanmenu css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/meanmenu.min.css">
    <!-- venobox css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/venobox.css">
    <!-- Icon font css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/flaticon.css">
    <!-- style css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/style.css">
    <!-- responsive css -->
    <link rel="stylesheet" href="/assets/website/css/v2ray_clash/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0RR1MWQRCP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0RR1MWQRCP');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- preloader  -->
    <div id="preloader"></div>
    <!-- Start header -->
    <header class="header-one">
        <div id="sticker" class="header-menu-area header-area header-area-4">
            <div class="container">
                <div class="row">
                    <div class="col-xl-4 col-lg-4 col-md-4 d-flex align-items-center">
                        <div class="logo">
                            <a href="/">
                                                                <span>VPN加速器</span>
                                                            </a>
                        </div>
                    </div>
                    <div class="col-xl-8 col-lg-8 col-md-8">
                        <div class="header_menu t-center">
                            <nav id="mobile-menu">
                                <ul class="main-menu">
                                                                        <li class="contact"><a href="/">首页</a></li>
                                                                        <li class="contact"><a href="/free-nodes/">免费节点</a></li>
                                                                        <li class="contact"><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li class="contact"><a href="/news/">新闻资讯</a></li>
                                                                        <li class="contact"><a href="/client.htm">客户端</a></li>
                                                                    </ul>
                            </nav>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="mobile-menu"></div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- End header area -->
    <main>
        <!-- Start Breadcrumb Area -->
        <div class="page-area bread-pd">
            <div class="breadcumb-overlay"></div>
            <div class="container">
                <div class="row">
                    <div class="col-xl-12">
                        <div class="breadcrumb-title text-center">
                            <h1>SpringCloud之Feign使用和拓展</h1>
                            <div class="bread-come">
                                <nav aria-label="breadcrumb ">
                                    <ol class="breadcrumb purple lighten-4 justify-content-center">
                                        <li class="breadcrumb-items"><a class="black-text" href="/">首页</a><i class="ti-angle-right" aria-hidden="true"></i></li>
                                        <li class="breadcrumb-items"><a href="/news/">新闻资讯<i class="ti-angle-right" aria-hidden="true"></i></a></li>
                                        <li class="breadcrumb-items">正文</li>
                                    </ol>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Breadcrumb Area -->
        <!-- Service area start -->
        <div class="service-area bg-color area-padding-2">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="SpringCloudFeign_0" rel="nofollow"></a>SpringCloud之Feign使用和拓展</h2> <p>在使用Spring Cloud开发微服务应用时，各个服务提供者都是以HTTP接口的形式对外提供服务，因此在服务消费者调用服务提供者时，底层通过HTTP Client的方式访问。当然我们可以使用JDK原生的URLConnection、Apache的HTTP Client、Netty的异步HTTP Client, Spring的RestTemplate去实现服务间的调用。但是最方便、最优雅的方式是通过Spring Cloud Open Feign进行服务间的调用。Spring Cloud对Feign进行了增强，使Feign支持Spring MVC的注解，并整合了Ribbon等，从而让Feign的使用更加方便。本篇文章将从原理、实战分别对Feign扩展增强的角度进行剖析，帮助开发者快速掌握生产级别的Feign实战技巧。</p> <h3><a id="Feign_3" rel="nofollow"></a>一、什么是Feign</h3> <p>Feign是一个<strong>声明式的Web Service客户端</strong>。它的出现使开发Web Service客户端变得很简单。使用Feign只需要创建一个接口加上对应的注解，比如：FeignClient注解。Feign有可插拔的注解，包括Feign注解和JAX-RS注解。Feign也支持编码器和解码器，Spring Cloud Open Feign对Feign进行增强支持Spring MVC注解，可以像Spring Web一样使用HttpMessageConverters等。<br /> Feign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用Feign，可以做到使用HTTP请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问HTTP请求。接下来介绍一下Feign的特性，具体如下：</p> <p>❑ 可插拔的注解支持，包括Feign注解和JAX-RS注解。<br /> ❑ 支持可插拔的HTTP编码器和解码器。<br /> ❑ 支持Hystrix和它的Fallback。<br /> ❑ 支持Ribbon的负载均衡。<br /> ❑ 支持HTTP请求和响应的压缩。Feign是一个声明式的Web Service客户端，它的目的就是让Web Service调用更加简单。它整合了Ribbon和Hystrix，从而不需要开发者针对Feign对其进行整合。Feign还提供了HTTP请求的模板，通过编写简单的接口和注解，就可以定义好HTTP请求的参数、格式、地址等信息。Feign会完全代理HTTP的请求，在使用过程中我们只需要依赖注入Bean，然后调用对应的方法传递参数即可。Open Feign地址：http://github.com/OpenFeign/feign Spring Cloud Open Feign地址：http://github.com/spring-cloud/spring-cloud-openfeign</p> <h3><a id="_13" rel="nofollow"></a>二、入门案例</h3> <h4><a id="21__14" rel="nofollow"></a>2.1 案例演示</h4> <p>略。参考：</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/gyoomi/miracle"  rel="nofollow">实战代码演示</a></li> </ul> <h4><a id="22__19" rel="nofollow"></a>2.2 工作原理</h4> <p>通过上面的入门案例可以快速掌握Feign的基本使用，下面介绍一下Feign的工作原理：</p> <ol> <li> <p>在开发微服务应用时，我们会在主程序入口添加@EnableFeignClients注解开启对Feign Client扫描加载处理。根据Feign Client的开发规范，定义接口并加@FeignClients注解。</p> </li> <li> <p>当程序启动时，会进行包扫描，扫描所有@ FeignClients的注解的类，并将这些信息注入Spring IOC容器中。当定义的Feign接口中的方法被调用时，通过JDK的代理的方式，来生成具体的RequestTemplate。当生成代理时，Feign会为每个接口方法创建一个RequetTemplate对象，该对象封装了HTTP请求需要的全部信息，如请求参数名、请求方法等信息都是在这个过程中确定的。</p> </li> <li> <p>然后由RequestTemplate生成Request，然后把Request交给Client去处理，这里指的Client可以是JDK原生的URLConnection、Apache的Http Client，也可以是Okhttp。最后Client被封装到LoadBalanceClient类，这个类结合Ribbon负载均衡发起服务之间的调用。</p> </li> </ol> <h3><a id="Feign_28" rel="nofollow"></a>三、Feign的常见功能</h3> <h4><a id="31_Feign_29" rel="nofollow"></a>3.1 Feign的常见注解说明</h4> <p>FeignClient注解被@Target（ElementType.TYPE）修饰，表示FeignClient注解的作用目标在接口上。当打开org.springframework.cloud.openfeign.FeignClient这个注解定义类的时候，可以看到FeignClient注解对应的属性。<br /> FeignClient注解的常用属性归纳如下：</p> <p>❑ name：指定FeignClient的名称，如果项目使用了Ribbon, name属性会作为微服务的名称，用于服务发现。<br /> ❑ url:url一般用于调试，可以手动指定@FeignClient调用的地址。<br /> ❑ decode404：当发生404错误时，如果该字段为true，会调用decoder进行解码，否则抛出FeignException。<br /> ❑ configuration:Feign配置类，可以自定义Feign的Encoder、Decoder、LogLevel、Contract。<br /> ❑ fallback：定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback指定的类必须实现@FeignClient标记的接口。<br /> ❑ fallbackFactory：工厂类，用于生成fallback类示例，通过这个属性我们可以实现每个接口通用的容错逻辑，减少重复的代码。<br /> ❑ path：定义当前FeignClient的统一前缀。</p> <h4><a id="32_FeignGZIP_41" rel="nofollow"></a>3.2 Feign开启GZIP压缩</h4> <p>Spring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率，这里介绍两种不同的配置方式，即application.yml和application.properties的配置方式。下面将对Feign开启GZIP压缩的配置进行说明。</p> <ol> <li>具体的application.yml配置信息如下面代码所示。</li> </ol> <p>application.yml</p> <pre><code class="prism language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">compression</span><span class="token punctuation">:</span><span class="token key atrule">request</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">mime-types</span><span class="token punctuation">:</span> text/xml<span class="token punctuation">,</span> application/xml<span class="token punctuation">,</span> application/json<span class="token comment"># 配置压缩支持的MIME TYPE</span><span class="token key atrule">min-request-size</span><span class="token punctuation">:</span><span class="token number">2048</span><span class="token comment"># 配置压缩数据大小的下限</span><span class="token key atrule">response</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token comment"># 配置响应GZIP压缩</span></code></pre> <p>等价的application.properties配置信息如下：</p> <pre><code class="prism language-text">		# 配置请求GZIP压缩         feign.compression.request.enabled=true         # 配置响应GZIP压缩         feign.compression.response.enabled=true         # 配置压缩支持的MIME TYPE         feign.compression.request.mime-types=text/xml, application/xml, application/json         # 配置压缩数据大小的下限         feign.compression.request.min-request-size=2048</code></pre> <ol start="2"> <li>由于开启GZIP压缩之后，Feign之间的调用通过二进制协议进行传输，返回值需要修改为ResponseEntity&lt;byte[]&gt;才可以正常显示，否则会导致服务之间的调用结果乱码，对应的Feign的Client处理如下面代码所示。</li> </ol> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test"</span><span class="token punctuation">,</span> method<span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> ResponseEntity<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span> String queryStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>提示</p> <p>Spring Cloud的Finchley.RC2版Feign开启GZIP压缩时会出现乱码，但官方已经给出解决方案，扩展阅读可以参考：http://github.com/spring-cloud/spring-cloud-openfeign/issues/33。</p> </blockquote> <ol start="3"> <li>启动主应用程序SpringCloudFeignApplication.java，打开浏览器访问如下URL:http://localhost:8011/test?str=spring-cloud-dubbo，返回结果正常。</li> </ol> <h4><a id="33_Feign_85" rel="nofollow"></a>3.3 Feign支持属性文件配置</h4> <ol> <li>对单个指定特定名称的Feign进行配置<br /><code>@FeignClient</code>的配置信息可以通过<code>application.propertie</code>s或<code>application.yml</code>来配置，<code>application.yml</code>示例配置信息如下：</li> </ol> <pre><code class="prism language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">client</span><span class="token punctuation">:</span><span class="token key atrule">config</span><span class="token punctuation">:</span><span class="token key atrule">feignName</span><span class="token punctuation">:</span><span class="token comment">#需要配置的FeignName</span><span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token comment">#连接超时时间</span><span class="token key atrule">readTimeout</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token comment">#读超时时间设置</span><span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> full<span class="token comment">#配置Feign的日志级别</span><span class="token key atrule">errorDecoder</span><span class="token punctuation">:</span> com.example.SimpleErrorDecoder<span class="token comment">#Feign的错误解码器</span><span class="token key atrule">retryer</span><span class="token punctuation">:</span> com.example.SimpleRetryer<span class="token comment">#配置重试</span><span class="token key atrule">requestInterceptors</span><span class="token punctuation">:</span><span class="token comment">#配置拦截器</span><span class="token punctuation">-</span> com.example.FooRequestInterceptor<span class="token punctuation">-</span> com.example.BarRequestInterceptor<span class="token key atrule">decode404</span><span class="token punctuation">:</span><span class="token boolean important">false</span><span class="token key atrule">encoder</span><span class="token punctuation">:</span> com.example.SimpleEncoder<span class="token comment">#Feign的编码器</span><span class="token key atrule">decoder</span><span class="token punctuation">:</span> com.example.SimpleDecoder<span class="token comment">#Feign的解码器</span><span class="token key atrule">contract</span><span class="token punctuation">:</span> com.example.SimpleContract<span class="token comment">#Feign的Contract配置</span></code></pre> <ol start="2"> <li>作用于所有Feign的配置方式</li> </ol> <p><code>@EnableFeignClients</code>注解上有个<code>defaultConfiguration</code>属性，我们可以将默认配置写成一个类，比如这个配置类叫<code>DefaultFeignConfiguration.java</code>，在主程序的启动入口用<code>defaultConfiguration</code>来引用配置，示例配置如下所示：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration<span class="token operator">=</span> DefaultFeignConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>如果想使用application.yml或application.properties来作用于所有Feign也是可以的，示例在application.yml中的配置如下所示：</p> <pre><code class="prism language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">client</span><span class="token punctuation">:</span><span class="token key atrule">config</span><span class="token punctuation">:</span><span class="token key atrule">default</span><span class="token punctuation">:</span><span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token key atrule">readTimeout</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> basic</code></pre> <p>注意，如果通过Java代码的方式配置过Feign，然后又通过属性文件的方式配置Feign，属性文件中Feign的配置会覆盖Java代码的配置。但是可以配置feign.client.default-to-properties=false来改变Feign配置生效的优先级。</p> <h4><a id="34_Feign_Client_135" rel="nofollow"></a>3.4 Feign Client开启日志</h4> <p>Feign为每一个FeignClient都提供了一个feign.Logger实例，可以在配置中开启日志，开启方式比较简单，分为两步。</p> <p><strong>第一步</strong>：在application.yml或者application.properties中配置日志输出。<br /> 在application.yml中设置日志输出级别，如</p> <pre><code class="prism language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">level</span><span class="token punctuation">:</span><span class="token key atrule">cn.springcloud.book.feign.service.HelloFeignService</span><span class="token punctuation">:</span> debug</code></pre> <p><strong>第二步</strong>：通过Java代码的方式在主程序入口类中配置日志Bean，代码如下所示：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Bean</span>         Logger<span class="token punctuation">.</span>Level<span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>也可以通过创建带有@Configuration注解的类，去配置日志bean，如下代码所示：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">HelloFeignServiceConfig</span><span class="token punctuation">{<!-- --></span><span class="token comment">/**              *Logger.Level的具体级别如下：                   NONE：不记录任何信息                   BASIC：仅记录请求方法、URL以及响应状态码和执行时间                   HEADERS：除了记录BASIC级别的信息外，还会记录请求和响应的头信息                   FULL：记录所有请求与响应的明细，包括头信息、请求体、元数据              */</span>             Logger<span class="token punctuation">.</span>Level<span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> Logger<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4><a id="35_Feign_174" rel="nofollow"></a>3.5 Feign的超时设置</h4> <p>Feign的调用分两层，即Ribbon的调用和Hystrix的调用，高版本的Hystrix默认是关闭的。</p> <pre><code class="prism language-java">         feign<span class="token punctuation">.</span>RetryableException<span class="token operator">:</span> Read timed out executing POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/*******             at feign.FeignException.errorExecuting(FeignException.java:67)             at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandl                 er.java:104)             at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)             at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.                 java:103)             at com.sun.proxy.$Proxy113.getBaseRow(Unknown Source)         Caused by: java.net.SocketTimeoutException: Read timed out</span></code></pre> <p>如果出现上面的报错信息，说明Ribbon处理超时，此时设置Ribbon的配置信息如下即可。</p> <pre><code class="prism language-yaml"><span class="token comment">#获取超时时间</span><span class="token key atrule">ribbon.ReadTimeout</span><span class="token punctuation">:</span><span class="token number">120000</span><span class="token comment">#请求连接的超时时间</span><span class="token key atrule">ribbon.ConnectTimeout</span><span class="token punctuation">:</span><span class="token number">30000</span></code></pre> <p><strong>如果开启Hystrix, Hystrix的超时报错信息如下所示。</strong></p> <pre><code class="prism language-java">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>HystrixRuntimeException<span class="token operator">:</span>  FeignDemo#<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  timed<span class="token operator">-</span>             out and no fallback available<span class="token punctuation">.</span>             at com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>AbstractCommand$<span class="token number">22.</span><span class="token function">call</span><span class="token punctuation">(</span>AbstractCommand<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">819</span><span class="token punctuation">)</span>             at com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>AbstractCommand$<span class="token number">22.</span><span class="token function">call</span><span class="token punctuation">(</span>AbstractCommand<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">804</span><span class="token punctuation">)</span>             at rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OperatorOnErrorResumeNextViaFunction$<span class="token number">4.</span><span class="token function">onError</span><span class="token punctuation">(</span>Ope                 ratorOnErrorResumeNextViaFunction<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">140</span><span class="token punctuation">)</span>             at rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDoOnEach$DoOnEachSubscriber<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>OnSubscribeDoOnEach<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span></code></pre> <p>看到上面的报错信息，说明Hystrix超时报错，此时设置Hystrix的配置信息如下所示.</p> <pre><code class="prism language-yaml"><span class="token key atrule">feign.hystrix.enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token comment"># hystrix熔断机制</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">shareSecurityContext</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">command</span><span class="token punctuation">:</span><span class="token key atrule">default</span><span class="token punctuation">:</span><span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span><span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span><span class="token number">100000</span><span class="token key atrule">forceClosed</span><span class="token punctuation">:</span><span class="token boolean important">true</span><span class="token key atrule">execution</span><span class="token punctuation">:</span><span class="token key atrule">isolation</span><span class="token punctuation">:</span><span class="token key atrule">thread</span><span class="token punctuation">:</span><span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span><span class="token number">600000</span></code></pre> <h3><a id="_230" rel="nofollow"></a>四、实战和常见问题</h3> <h4><a id="41_FeignHttpClient_231" rel="nofollow"></a>4.1 Feign默认Http发送的Client的替换</h4> <p>Feign在默认情况下使用的是JDK原生的URLConnection发送HTTP请求，没有连接池，但是对每个地址会保持一个长连接，即利用HTTP的persistence connection。我们可以用Apache的HTTP Client替换Feign原始的HTTP Client，通过设置连接池、超时时间等对服务之间的调用调优。Spring Cloud从Brixtion.SR5版本开始支持这种替换，接下来介绍一下如何用HTTP Client和okhttp去替换Feign默认的Client。</p> <ol> <li>使用HTTP Client替换Feign默认Client</li> </ol> <p>使用HTTP Client替换Feign的默认Client非常简单。主要有以下步骤。</p> <p><strong>依赖引入</strong></p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span><span class="token attr-name">--</span><span class="token attr-name">Spring</span><span class="token attr-name">Cloud</span><span class="token attr-name">OpenFeign的Starter的依赖</span><span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span><span class="token attr-name">--</span><span class="token attr-name">使用Apache</span><span class="token attr-name">HttpClient替换Feign原生httpclient</span><span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.17.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre> <p><strong>配置</strong><br /> 在application.yml中配置让Feign启动时加载HTTP Client替换默认的Client，如下所示。</p> <pre><code class="prism language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span><span class="token number">8010</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>httpclient<span class="token punctuation">-</span>demo<span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">httpclient</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span></code></pre> <p><strong>启动测试</strong></p> <p>略。</p> <ol start="2"> <li>使用okhttp替换Feign默认的Client<br /> HTTP是目前比较通用的网络请求方式，用来访问请求交换数据，有效地使用HTTP可以使应用访问速度变得更快，更节省带宽。okhttp是一个很棒的HTTP客户端，具有以下功能和特性。</li> </ol> <p>❑ 支持SPDY，可以合并多个到同一个主机的请求。<br /> ❑ 使用连接池技术减少请求的延迟(如果SPDY是可用的话)。<br /> ❑ 使用GZIP压缩减少传输的数据量。<br /> ❑ 缓存响应避免重复的网络请求。</p> <p><strong>依赖管理</strong></p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!</span><span class="token attr-name">--</span><span class="token attr-name">Spring</span><span class="token attr-name">Cloud</span><span class="token attr-name">OpenFeign的Starter的依赖</span><span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre> <p><strong>配置</strong><br /> 开启okhttp为Feign默认的Client。在application.yml中进行如下配置。</p> <pre><code class="prism language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span><span class="token number">8011</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">application</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>okhttp<span class="token punctuation">-</span>demo<span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">httpclient</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">false</span><span class="token key atrule">okhttp</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span><span class="token boolean important">true</span></code></pre> <p>okHttpClient是okhttp的核心功能的执行者，可以通过OkHttpClient client=new OkHttp Client()；来创建默认的OkHttpClient对象，也可以使用如下代码来构建自定义的OkHttpClient对象，上面配置信息只给出了常用的设置项，其他设置项比较复杂，有兴趣的读者可以自己扩展阅读学习，具体okHttp的配置设置如下所示。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span>FeignAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">FeignOkHttpConfig</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> okhttp3<span class="token punctuation">.</span>OkHttpClient<span class="token function">okHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">okhttp3<span class="token punctuation">.</span>OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//设置连接超时</span><span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token comment">//设置读超时</span><span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token comment">//设置写超时</span><span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token comment">//是否自动重连</span><span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//构建OkHttpClient对象</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>启动测试</strong></p> <p>略。</p> <h4><a id="42_Feign_354" rel="nofollow"></a>4.2 解决Feign首次请求失败问题</h4> <p>当Feign和Ribbon整合了Hystrix之后，可能会出现首次调用失败的问题，造成该问题出现的原因分析如下：</p> <p>Hystrix默认的超时时间是1秒，如果超过这个时间尚未做出响应，将会进入fallback代码。由于Bean的装配以及懒加载机制等，Feign首次请求都会比较慢。如果这个响应时间大于1秒，就会出现请求失败的问题。下面以feign为例，介绍三种方法处理Feign首次请求失败的问题。</p> <p>方法一 将Hystrix的超时时间改为5秒，配置如下所示：</p> <pre><code class="prism language-yaml"><span class="token key atrule">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span><span class="token punctuation">:</span><span class="token number">5000</span></code></pre> <p>方法二 禁用Hystrix的超时时间，配置如下所示：</p> <pre><code class="prism language-yaml"><span class="token key atrule">hystrix.command.default.execution.timeout.enabled</span><span class="token punctuation">:</span><span class="token boolean important">false</span></code></pre> <p>方法三 使用Feign的时候直接关闭Hystrix，该方式不推荐使用。</p> <pre><code class="prism language-yaml"><span class="token key atrule">feign.hystrix.enabled</span><span class="token punctuation">:</span><span class="token boolean important">false</span></code></pre> <blockquote> <p>说明<br /> 针对Feign首次请求失败的问题，可参考如下链接：https://github.com/spring-cloud/spring-cloud-netflix/issues/768</p> </blockquote> <h4><a id="43_Feign_378" rel="nofollow"></a>4.3 Feign返回图片流处理方式</h4> <p>通过Feign返回图片一般为字节数组，如下列代码所示。</p> <pre><code class="prism language-java"><span class="token comment">//  生成图片验证码</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"createImageCode"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">createImageCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"imagekey"</span><span class="token punctuation">)</span> String imagekey<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>在使用Feign的过程中可以将流转成字节数组传递，但是因为Controller层的返回不能直接返回byte，因此需要将Feign的返回值修改为response，示例代码如下。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"createImageCode"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Response<span class="token function">createImageCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"imagekey"</span><span class="token punctuation">)</span> String imagekey<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h4><a id="44_FeignToken_395" rel="nofollow"></a>4.4 Feign调用传递Token</h4> <p>在进行认证鉴权的时候，不管是jwt，还是security，当使用Feign时就会发现外部请求到A服务的时候，A服务是可以拿到Token的，然而当服务使用Feign调用B服务时，Token就会丢失，从而认证失败。解决方法相对比较简单，需要做的就是在Feign调用的时候，向请求头里面添加需要传递的Token。</p> <p>我们只需要实现Feign提供的一个接口RequestInterceptor，假设我们在验证权限的时候放在请求头里面的key为oauthToken，先获取当前请求中的key为oauthToken的Token，然后放到Feign的请求Header上，如下代码所示。</p> <pre><code class="prism language-java"><span class="token comment">// Feign统一Token拦截器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">FeignTokenInterceptor</span><span class="token keyword">implements</span><span class="token class-name">RequestInterceptor</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span><span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将获取Token对应的值往下面传</span>                 requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"oauthToken"</span><span class="token punctuation">,</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"oauthToken"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> HttpServletRequest<span class="token function">getHttpServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span>getRequest<span class="token operator">-</span><span class="token function">Attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>具体使用案例可参考：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/gyoomi/miracle"  rel="nofollow">Feign实战例子</a>，喜欢的老铁给个start!!!</p> <p>参考书籍：《重新定义Spring Cloud实战》</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-70532.htm">在打包vue项目时报错的问题解决</a></p>
                                        <p>下一个：<a href="/news/article-71174.htm">JSON  传输数据出现415错误 Content type &#8216;application/xml;charset=UTF-8&#8217; not supported</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-61784.htm" title="麦富迪猫粮到底能不能吃 十大垃圾猫粮黑名单">麦富迪猫粮到底能不能吃 十大垃圾猫粮黑名单</a></li>
                        <li class="py-2"><a href="/news/article-61783.htm" title="动物疫苗公司10强名单公布时间（动物疫苗公司10强名单公布时间查询）">动物疫苗公司10强名单公布时间（动物疫苗公司10强名单公布时间查询）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-free-node-subscribe.htm" title="VPN加速器 | 2月23日22.4M/S|免费VPN/Shadowrocket/SSR/Clash/V2ray免费节点订阅分享">VPN加速器 | 2月23日22.4M/S|免费VPN/Shadowrocket/SSR/Clash/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-60628.htm" title="宠物医院治猫藓大概多少钱（宠物医院治疗猫藓贵吗）">宠物医院治猫藓大概多少钱（宠物医院治疗猫藓贵吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-18-free-node-subscribe.htm" title="VPN加速器 | 2月18日22.6M/S|免费VPN/Clash/V2ray/SSR/Shadowrocket免费节点订阅分享">VPN加速器 | 2月18日22.6M/S|免费VPN/Clash/V2ray/SSR/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-68559.htm" title="被打过疫苗的宠物抓伤人需要打针吗（被打过疫苗的宠物抓伤人需要打针吗多少钱）">被打过疫苗的宠物抓伤人需要打针吗（被打过疫苗的宠物抓伤人需要打针吗多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-71843.htm" title="做宠物粮生意赚钱吗知乎文章（做宠物粮生意怎样）">做宠物粮生意赚钱吗知乎文章（做宠物粮生意怎样）</a></li>
                        <li class="py-2"><a href="/news/article-59476.htm" title="动物防疫站电话咨询电话从哪里查（动物防疫站地址）">动物防疫站电话咨询电话从哪里查（动物防疫站地址）</a></li>
                        <li class="py-2"><a href="/news/article-70533.htm" title="SpringCloud之Feign使用和拓展">SpringCloud之Feign使用和拓展</a></li>
                        <li class="py-2"><a href="/news/article-66038.htm" title="沈阳免费领养宠物的平台叫什么（沈阳免费领养宠物的平台叫什么来着）">沈阳免费领养宠物的平台叫什么（沈阳免费领养宠物的平台叫什么来着）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- Service area End -->
    </main>
        <!-- Start Footer Area -->
    <footer class="footer1">
        <!-- Start Footer Bottom Area -->
        <div class="footer-area-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-xl-6 col-lg-6 col-md-6">
                        <div class="copyright">
                            <p>
                                <a href="/">首页</a> |
                                <a href="/free-node/">免费节点</a> |
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <a href="/">VPN加速器 机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </div>
                    </div>
                    <div class="col-xl-6 col-lg-6 col-md-6">
                        <div class="footer-menu">
                            <ul>
                                <li><a href="#">About</a></li>
                                <li><a href="#">Terms & Condition</a></li>
                                <li><a href="#">Privacy</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom Area -->
    </footer>
    <!-- End Footer Area -->
    <!-- All JS here -->
    <!-- modernizr JS -->
    <script src="/assets/website/js/frontend/v2ray_clash/vendor/modernizr-3.5.0.min.js"></script>
    <!-- jquery latest version -->
    <script src="/assets/website/js/frontend/v2ray_clash/vendor/jquery-1.12.4.min.js"></script>
    <!-- Poper js -->
    <script src="/assets/website/js/frontend/v2ray_clash/popper.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/v2ray_clash/bootstrap.min.js"></script>
    <!-- owl.carousel js -->
    <script src="/assets/website/js/frontend/v2ray_clash/owl.carousel.min.js"></script>
    <!-- Isotop js -->
    <script src="/assets/website/js/frontend/v2ray_clash/isotope.pkgd.min.js"></script>
    <!-- meanmenu js -->
    <script src="/assets/website/js/frontend/v2ray_clash/jquery.meanmenu.js"></script>
    <!-- Counter js -->
    <script src="/assets/website/js/frontend/v2ray_clash/jquery.counterup.min.js"></script>
    <!-- waypoint js -->
    <script src="/assets/website/js/frontend/v2ray_clash/waypoints.js"></script>
    <script src="/assets/website/js/frontend/v2ray_clash/tilts.js"></script>
    <!-- venobox js -->
    <script src="/assets/website/js/frontend/v2ray_clash/venobox.min.js"></script>
    <!-- magnific js -->
    <script src="/assets/website/js/frontend/v2ray_clash/magnific.min.js"></script>
    <!-- wow js -->
    <script src="/assets/website/js/frontend/v2ray_clash/wow.min.js"></script>
    <!-- plugins js -->
    <script src="/assets/website/js/frontend/v2ray_clash/plugins.js"></script>
    <!-- main js -->
    <script src="/assets/website/js/frontend/v2ray_clash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>